pages = [{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/silex.html","n":"silex","t":"package silex","d":"silex"},
{"l":"api/silex/ArraySource.html","n":"ArraySource","t":"class ArraySource[Character, Position](array: Array[Character], positioner: Positioner[Character, Position]) extends Source[Character, Position]","d":"silex/ArraySource"},
{"l":"api/silex/CharLexers.html","n":"CharLexers","t":"trait CharLexers","d":"silex/CharLexers"},
{"l":"api/silex/CharLexers.html","n":"Character","t":"type Character = Char","d":"silex/CharLexers"},
{"l":"api/silex/CharLexers.html","n":"digit","t":"val digit: <none>","d":"silex/CharLexers"},
{"l":"api/silex/CharLexers.html","n":"nonZero","t":"val nonZero: <none>","d":"silex/CharLexers"},
{"l":"api/silex/CharLexers.html","n":"hex","t":"val hex: <none>","d":"silex/CharLexers"},
{"l":"api/silex/CharLexers.html","n":"whiteSpace","t":"val whiteSpace: <none>","d":"silex/CharLexers"},
{"l":"api/silex/IndexPositioner$.html","n":"IndexPositioner","t":"object IndexPositioner extends Positioner[Any, Int]","d":"silex/IndexPositioner$"},
{"l":"api/silex/IndexPositioner$.html","n":"start","t":"val start: Int","d":"silex/IndexPositioner$"},
{"l":"api/silex/IndexPositioner$.html","n":"increment","t":"def increment(position: Int, character: Any): Int","d":"silex/IndexPositioner$"},
{"l":"api/silex/IteratorSource.html","n":"IteratorSource","t":"class IteratorSource[Character, Position](iterator: Iterator[Character], positioner: Positioner[Character, Position]) extends Source[Character, Position]","d":"silex/IteratorSource"},
{"l":"api/silex/Lexers.html","n":"Lexers","t":"trait Lexers extends RegExps with Zippers","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"Token","t":"type Token","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"Position","t":"type Position","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"TokenMaker","t":"type TokenMaker = (Iterable[Character], (Position, Position)) => Token","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"|>","t":"def |>(makeToken: (Iterable[Character], (Position, Position)) => Token): Producer","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"|>","t":"def |>(makeToken: Iterable[Character] => Token): Producer","d":"silex/Lexers"},
{"l":"api/silex/Lexers.html","n":"|>","t":"def |>(token: Token): Producer","d":"silex/Lexers"},
{"l":"api/silex/Lexers$Producer.html","n":"Producer","t":"class Producer(regExp: RegExp, makeToken: TokenMaker)","d":"silex/Lexers$Producer"},
{"l":"api/silex/Lexers$Lexer.html","n":"Lexer","t":"class Lexer","d":"silex/Lexers$Lexer"},
{"l":"api/silex/Lexers$Lexer.html","n":"onError","t":"def onError(handler: TokenMaker): Lexer","d":"silex/Lexers$Lexer"},
{"l":"api/silex/Lexers$Lexer.html","n":"onEnd","t":"def onEnd(handler: Position => Token): Lexer","d":"silex/Lexers$Lexer"},
{"l":"api/silex/Lexers$Lexer.html","n":"apply","t":"def apply(source: Source[Character, Position], stopOnError: Boolean): Iterator[Token]","d":"silex/Lexers$Lexer"},
{"l":"api/silex/Lexers$Lexer.html","n":"spawn","t":"def spawn(source: Source[Character, Position], stopOnError: Boolean, batchSize: Int): Iterator[Token]","d":"silex/Lexers$Lexer"},
{"l":"api/silex/Lexers$Lexer$.html","n":"Lexer","t":"object Lexer","d":"silex/Lexers$Lexer$"},
{"l":"api/silex/Lexers$Lexer$.html","n":"apply","t":"def apply(producers: Producer*): Lexer","d":"silex/Lexers$Lexer$"},
{"l":"api/silex/NoPositioner$.html","n":"NoPositioner","t":"object NoPositioner extends Positioner[Any, Unit]","d":"silex/NoPositioner$"},
{"l":"api/silex/NoPositioner$.html","n":"start","t":"val start: Unit","d":"silex/NoPositioner$"},
{"l":"api/silex/NoPositioner$.html","n":"increment","t":"def increment(position: Unit, character: Any): Unit","d":"silex/NoPositioner$"},
{"l":"api/silex/Positioner.html","n":"Positioner","t":"trait Positioner[-Character, Position]","d":"silex/Positioner"},
{"l":"api/silex/Positioner.html","n":"start","t":"val start: Position","d":"silex/Positioner"},
{"l":"api/silex/Positioner.html","n":"increment","t":"def increment(position: Position, character: Character): Position","d":"silex/Positioner"},
{"l":"api/silex/ReaderSource.html","n":"ReaderSource","t":"class ReaderSource[Position](reader: Reader, positioner: Positioner[Char, Position], markLimit: Int) extends Source[Char, Position]","d":"silex/ReaderSource"},
{"l":"api/silex/RegExps.html","n":"RegExps","t":"trait RegExps","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"Character","t":"type Character","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"oneOf","t":"def oneOf(chars: Seq[Character]): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"elem","t":"def elem(predicate: Character => Boolean): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"elem","t":"def elem(char: Character): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"word","t":"def word(chars: Seq[Character]): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"many","t":"def many(regExp: RegExp): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"many1","t":"def many1(regExp: RegExp): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"opt","t":"def opt(regExp: RegExp): RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps.html","n":"any","t":"val any: RegExp","d":"silex/RegExps"},
{"l":"api/silex/RegExps$RegExp.html","n":"RegExp","t":"class RegExp","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"|","t":"def |(that: RegExp): RegExp","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"~","t":"def ~(that: RegExp): RegExp","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"times","t":"def times(n: Int): RegExp","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp.html","n":"opt","t":"def opt: RegExp","d":"silex/RegExps$RegExp"},
{"l":"api/silex/RegExps$RegExp$.html","n":"RegExp","t":"object RegExp","d":"silex/RegExps$RegExp$"},
{"l":"api/silex/RegExps$RegExp$$EmptyStr$.html","n":"EmptyStr","t":"object EmptyStr extends RegExp","d":"silex/RegExps$RegExp$$EmptyStr$"},
{"l":"api/silex/RegExps$RegExp$$EmptyStr$.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$EmptyStr$"},
{"l":"api/silex/RegExps$RegExp$$EmptyStr$.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$EmptyStr$"},
{"l":"api/silex/RegExps$RegExp$$EmptyStr$.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$EmptyStr$"},
{"l":"api/silex/RegExps$RegExp$$EmptySet$.html","n":"EmptySet","t":"object EmptySet extends RegExp","d":"silex/RegExps$RegExp$$EmptySet$"},
{"l":"api/silex/RegExps$RegExp$$EmptySet$.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$EmptySet$"},
{"l":"api/silex/RegExps$RegExp$$EmptySet$.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$EmptySet$"},
{"l":"api/silex/RegExps$RegExp$$EmptySet$.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$EmptySet$"},
{"l":"api/silex/RegExps$RegExp$$Elem.html","n":"Elem","t":"class Elem(predicate: Character => Boolean) extends RegExp","d":"silex/RegExps$RegExp$$Elem"},
{"l":"api/silex/RegExps$RegExp$$Elem.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$Elem"},
{"l":"api/silex/RegExps$RegExp$$Elem.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$Elem"},
{"l":"api/silex/RegExps$RegExp$$Elem.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$Elem"},
{"l":"api/silex/RegExps$RegExp$$Union.html","n":"Union","t":"class Union(left: RegExp, right: RegExp) extends RegExp","d":"silex/RegExps$RegExp$$Union"},
{"l":"api/silex/RegExps$RegExp$$Union.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$Union"},
{"l":"api/silex/RegExps$RegExp$$Union.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$Union"},
{"l":"api/silex/RegExps$RegExp$$Union.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$Union"},
{"l":"api/silex/RegExps$RegExp$$Concat.html","n":"Concat","t":"class Concat(first: RegExp, second: RegExp) extends RegExp","d":"silex/RegExps$RegExp$$Concat"},
{"l":"api/silex/RegExps$RegExp$$Concat.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$Concat"},
{"l":"api/silex/RegExps$RegExp$$Concat.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$Concat"},
{"l":"api/silex/RegExps$RegExp$$Concat.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$Concat"},
{"l":"api/silex/RegExps$RegExp$$Star.html","n":"Star","t":"class Star(regExp: RegExp) extends RegExp","d":"silex/RegExps$RegExp$$Star"},
{"l":"api/silex/RegExps$RegExp$$Star.html","n":"acceptsEmpty","t":"val acceptsEmpty: Boolean","d":"silex/RegExps$RegExp$$Star"},
{"l":"api/silex/RegExps$RegExp$$Star.html","n":"isProductive","t":"val isProductive: Boolean","d":"silex/RegExps$RegExp$$Star"},
{"l":"api/silex/RegExps$RegExp$$Star.html","n":"hasNext","t":"val hasNext: Boolean","d":"silex/RegExps$RegExp$$Star"},
{"l":"api/silex/Source.html","n":"Source","t":"trait Source[Character, Position] extends Iterator[Character]","d":"silex/Source"},
{"l":"api/silex/Source.html","n":"commit","t":"def commit(): (Position, Iterable[Character], Position)","d":"silex/Source"},
{"l":"api/silex/Source.html","n":"mark","t":"def mark(): Unit","d":"silex/Source"},
{"l":"api/silex/Source.html","n":"reset","t":"def reset(): Unit","d":"silex/Source"},
{"l":"api/silex/Source.html","n":"currentPosition","t":"def currentPosition: Position","d":"silex/Source"},
{"l":"api/silex/Source.html","n":"close","t":"def close(): Unit","d":"silex/Source"},
{"l":"api/silex/Source$.html","n":"Source","t":"object Source","d":"silex/Source$"},
{"l":"api/silex/Source$.html","n":"fromFile","t":"def fromFile[Position](file: String, positioner: Positioner[Char, Position], charset: Charset, inMemory: Boolean): Source[Char, Position]","d":"silex/Source$"},
{"l":"api/silex/Source$.html","n":"fromString","t":"def fromString(string: String): Source[Char, StringPosition]","d":"silex/Source$"},
{"l":"api/silex/Source$.html","n":"fromString","t":"def fromString[Position](string: String, positioner: Positioner[Char, Position]): Source[Char, Position]","d":"silex/Source$"},
{"l":"api/silex/Source$.html","n":"fromArray","t":"def fromArray[Character, Position](array: Array[Character], positioner: Positioner[Character, Position]): Source[Character, Position]","d":"silex/Source$"},
{"l":"api/silex/Source$.html","n":"fromIterator","t":"def fromIterator[Character, Position](iterator: Iterator[Character], positioner: Positioner[Character, Position]): Source[Character, Position]","d":"silex/Source$"},
{"l":"api/silex/StringPosition.html","n":"StringPosition","t":"class StringPosition(index: Int, line: Int, column: Int)","d":"silex/StringPosition"},
{"l":"api/silex/StringPosition.html","n":"+","t":"def +(char: Char): StringPosition","d":"silex/StringPosition"},
{"l":"api/silex/StringPositioner$.html","n":"StringPositioner","t":"object StringPositioner extends Positioner[Char, StringPosition]","d":"silex/StringPositioner$"},
{"l":"api/silex/StringPositioner$.html","n":"start","t":"val start: StringPosition","d":"silex/StringPositioner$"},
{"l":"api/silex/StringSource.html","n":"StringSource","t":"class StringSource[Position](string: String, positioner: Positioner[Char, Position]) extends Source[Char, Position]","d":"silex/StringSource"},
{"l":"api/silex/util.html","n":"silex.util","t":"package silex.util","d":"silex/util"},
{"l":"api/silex/util/Zippers.html","n":"Zippers","t":"trait Zippers","d":"silex/util/Zippers"},
{"l":"api/index.html","n":"API","t":" API","d":"api"}];